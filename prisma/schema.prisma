generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(uuid())
  fullName            String?
  address             String        @unique
  email               String        @unique
  smartAccountAddress String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  companyName         String?
  companyUrl          String?
  companyImage        String?
  bankAccountNumber   String?
  bankAccountBic      String?
  bankAccountCountry  String?
  bridgeExternalAccountId String?
  bridgeCustomerId        String?
  bridgeKycLinkId         String?
  customers           Customer[]
  paymentLinks        PaymentLink[]
  products            Product[]
  transactions        Transaction[]
  webhooks            Webhook[]
}

model Product {
  id            String         @id @default(uuid())
  name          String
  description   String
  imageUrl      String
  price         Decimal        @db.Decimal(10, 2)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  paymentMethod PaymentMethod  @default(ONE_TIME)
  paymentLinks  PaymentLink[]
  user          User           @relation(fields: [userId], references: [id])
  subscriptions Subscription[]
  transactions  Transaction[]
}

model PaymentLink {
  id              String   @id @default(uuid())
  name            String
  slug            String   @unique
  requiresWorldId Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  productId       String
  redirectUrl     String
  product         Product  @relation(fields: [productId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model Webhook {
  id        String            @id @default(uuid())
  name      String
  url       String
  userId    String
  eventType WebhookEventType
  user      User              @relation(fields: [userId], references: [id])
  eventLogs WebhookEventLog[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@unique([userId, eventType])
}

enum WebhookEventLogStatus {
  SUCCESS
  BAD_REQUEST
  UNAUTHORIZED
  NOT_FOUND
  INTERNAL_SERVER_ERROR
  TIMEOUT
  UNKNOWN
}

model WebhookEventLog {
  id         String                @id @default(uuid())
  webhookId  String
  response   Json?
  status     WebhookEventLogStatus
  statusCode Int
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  payload    Json
  webhook    Webhook               @relation(fields: [webhookId], references: [id])
}

model Transaction {
  id         String   @id @default(uuid())
  hash       String   @unique
  amount     String
  timestamp  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customerId String
  productId  String
  userId     String
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Customer {
  id           String        @id @default(uuid())
  address      String        @unique
  ens          String?       @unique
  avatar       String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Record {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  owner       String
  addresses   Json
  texts       Json
  contenthash String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  @@index([owner])
}

model Subscription {
  id                String   @id @default(uuid())
  subscriptionId    String
  hash              String   @unique
  chainId           Int      @default(8453)
  subscriberAddress String
  merchantAddress   String
  tokenAddress      String
  interval          Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  productId         String
  product           Product  @relation(fields: [productId], references: [id])
}

enum WebhookEventType {
  PAYMENT_SUCCESSFUL
  CUSTOMER_CREATED
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_CANCELLED
}

enum PaymentMethod {
  RECURRING
  ONE_TIME
}
